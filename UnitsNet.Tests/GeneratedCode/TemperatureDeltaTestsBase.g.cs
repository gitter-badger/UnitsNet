//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using NUnit.Framework;
using UnitsNet.Units;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of TemperatureDelta.
    /// </summary>
    [TestFixture]
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class TemperatureDeltaTestsBase
    {
        protected abstract double DegreesCelsiusDeltaInOneKelvinDelta { get; }
        protected abstract double DegreesDelisleDeltaInOneKelvinDelta { get; }
        protected abstract double DegreesFahrenheitDeltaInOneKelvinDelta { get; }
        protected abstract double DegreesNewtonDeltaInOneKelvinDelta { get; }
        protected abstract double DegreesRankineDeltaInOneKelvinDelta { get; }
        protected abstract double DegreesReaumurDeltaInOneKelvinDelta { get; }
        protected abstract double DegreesRoemerDeltaInOneKelvinDelta { get; }
        protected abstract double KelvinsDeltaInOneKelvinDelta { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DegreesCelsiusDeltaTolerance { get { return 1e-5; } }
        protected virtual double DegreesDelisleDeltaTolerance { get { return 1e-5; } }
        protected virtual double DegreesFahrenheitDeltaTolerance { get { return 1e-5; } }
        protected virtual double DegreesNewtonDeltaTolerance { get { return 1e-5; } }
        protected virtual double DegreesRankineDeltaTolerance { get { return 1e-5; } }
        protected virtual double DegreesReaumurDeltaTolerance { get { return 1e-5; } }
        protected virtual double DegreesRoemerDeltaTolerance { get { return 1e-5; } }
        protected virtual double KelvinsDeltaTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Test]
        public void KelvinDeltaToTemperatureDeltaUnits()
        {
            TemperatureDelta kelvindelta = TemperatureDelta.FromKelvinsDelta(1);
            Assert.AreEqual(DegreesCelsiusDeltaInOneKelvinDelta, kelvindelta.DegreesCelsiusDelta, DegreesCelsiusDeltaTolerance);
            Assert.AreEqual(DegreesDelisleDeltaInOneKelvinDelta, kelvindelta.DegreesDelisleDelta, DegreesDelisleDeltaTolerance);
            Assert.AreEqual(DegreesFahrenheitDeltaInOneKelvinDelta, kelvindelta.DegreesFahrenheitDelta, DegreesFahrenheitDeltaTolerance);
            Assert.AreEqual(DegreesNewtonDeltaInOneKelvinDelta, kelvindelta.DegreesNewtonDelta, DegreesNewtonDeltaTolerance);
            Assert.AreEqual(DegreesRankineDeltaInOneKelvinDelta, kelvindelta.DegreesRankineDelta, DegreesRankineDeltaTolerance);
            Assert.AreEqual(DegreesReaumurDeltaInOneKelvinDelta, kelvindelta.DegreesReaumurDelta, DegreesReaumurDeltaTolerance);
            Assert.AreEqual(DegreesRoemerDeltaInOneKelvinDelta, kelvindelta.DegreesRoemerDelta, DegreesRoemerDeltaTolerance);
            Assert.AreEqual(KelvinsDeltaInOneKelvinDelta, kelvindelta.KelvinsDelta, KelvinsDeltaTolerance);
        }

        [Test]
        public void FromValueAndUnit()
        {
            Assert.AreEqual(1, TemperatureDelta.From(1, TemperatureDeltaUnit.DegreeCelsiusDelta).DegreesCelsiusDelta, DegreesCelsiusDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.From(1, TemperatureDeltaUnit.DegreeDelisleDelta).DegreesDelisleDelta, DegreesDelisleDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.From(1, TemperatureDeltaUnit.DegreeFahrenheitDelta).DegreesFahrenheitDelta, DegreesFahrenheitDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.From(1, TemperatureDeltaUnit.DegreeNewtonDelta).DegreesNewtonDelta, DegreesNewtonDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.From(1, TemperatureDeltaUnit.DegreeRankineDelta).DegreesRankineDelta, DegreesRankineDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.From(1, TemperatureDeltaUnit.DegreeReaumurDelta).DegreesReaumurDelta, DegreesReaumurDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.From(1, TemperatureDeltaUnit.DegreeRoemerDelta).DegreesRoemerDelta, DegreesRoemerDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.From(1, TemperatureDeltaUnit.KelvinDelta).KelvinsDelta, KelvinsDeltaTolerance);
        }

        [Test]
        public void As()
        {
            var kelvindelta = TemperatureDelta.FromKelvinsDelta(1);
            Assert.AreEqual(DegreesCelsiusDeltaInOneKelvinDelta, kelvindelta.As(TemperatureDeltaUnit.DegreeCelsiusDelta), DegreesCelsiusDeltaTolerance);
            Assert.AreEqual(DegreesDelisleDeltaInOneKelvinDelta, kelvindelta.As(TemperatureDeltaUnit.DegreeDelisleDelta), DegreesDelisleDeltaTolerance);
            Assert.AreEqual(DegreesFahrenheitDeltaInOneKelvinDelta, kelvindelta.As(TemperatureDeltaUnit.DegreeFahrenheitDelta), DegreesFahrenheitDeltaTolerance);
            Assert.AreEqual(DegreesNewtonDeltaInOneKelvinDelta, kelvindelta.As(TemperatureDeltaUnit.DegreeNewtonDelta), DegreesNewtonDeltaTolerance);
            Assert.AreEqual(DegreesRankineDeltaInOneKelvinDelta, kelvindelta.As(TemperatureDeltaUnit.DegreeRankineDelta), DegreesRankineDeltaTolerance);
            Assert.AreEqual(DegreesReaumurDeltaInOneKelvinDelta, kelvindelta.As(TemperatureDeltaUnit.DegreeReaumurDelta), DegreesReaumurDeltaTolerance);
            Assert.AreEqual(DegreesRoemerDeltaInOneKelvinDelta, kelvindelta.As(TemperatureDeltaUnit.DegreeRoemerDelta), DegreesRoemerDeltaTolerance);
            Assert.AreEqual(KelvinsDeltaInOneKelvinDelta, kelvindelta.As(TemperatureDeltaUnit.KelvinDelta), KelvinsDeltaTolerance);
        }

        [Test]
        public void ConversionRoundTrip()
        {
            TemperatureDelta kelvindelta = TemperatureDelta.FromKelvinsDelta(1);
            Assert.AreEqual(1, TemperatureDelta.FromDegreesCelsiusDelta(kelvindelta.DegreesCelsiusDelta).KelvinsDelta, DegreesCelsiusDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.FromDegreesDelisleDelta(kelvindelta.DegreesDelisleDelta).KelvinsDelta, DegreesDelisleDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.FromDegreesFahrenheitDelta(kelvindelta.DegreesFahrenheitDelta).KelvinsDelta, DegreesFahrenheitDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.FromDegreesNewtonDelta(kelvindelta.DegreesNewtonDelta).KelvinsDelta, DegreesNewtonDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.FromDegreesRankineDelta(kelvindelta.DegreesRankineDelta).KelvinsDelta, DegreesRankineDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.FromDegreesReaumurDelta(kelvindelta.DegreesReaumurDelta).KelvinsDelta, DegreesReaumurDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.FromDegreesRoemerDelta(kelvindelta.DegreesRoemerDelta).KelvinsDelta, DegreesRoemerDeltaTolerance);
            Assert.AreEqual(1, TemperatureDelta.FromKelvinsDelta(kelvindelta.KelvinsDelta).KelvinsDelta, KelvinsDeltaTolerance);
        }

        [Test]
        public void ArithmeticOperators()
        {
            TemperatureDelta v = TemperatureDelta.FromKelvinsDelta(1);
            Assert.AreEqual(-1, -v.KelvinsDelta, KelvinsDeltaTolerance);
            Assert.AreEqual(2, (TemperatureDelta.FromKelvinsDelta(3)-v).KelvinsDelta, KelvinsDeltaTolerance);
            Assert.AreEqual(2, (v + v).KelvinsDelta, KelvinsDeltaTolerance);
            Assert.AreEqual(10, (v*10).KelvinsDelta, KelvinsDeltaTolerance);
            Assert.AreEqual(10, (10*v).KelvinsDelta, KelvinsDeltaTolerance);
            Assert.AreEqual(2, (TemperatureDelta.FromKelvinsDelta(10)/5).KelvinsDelta, KelvinsDeltaTolerance);
            Assert.AreEqual(2, TemperatureDelta.FromKelvinsDelta(10)/TemperatureDelta.FromKelvinsDelta(5), KelvinsDeltaTolerance);
        }

        [Test]
        public void ComparisonOperators()
        {
            TemperatureDelta oneKelvinDelta = TemperatureDelta.FromKelvinsDelta(1);
            TemperatureDelta twoKelvinsDelta = TemperatureDelta.FromKelvinsDelta(2);

            Assert.True(oneKelvinDelta < twoKelvinsDelta);
            Assert.True(oneKelvinDelta <= twoKelvinsDelta);
            Assert.True(twoKelvinsDelta > oneKelvinDelta);
            Assert.True(twoKelvinsDelta >= oneKelvinDelta);

            Assert.False(oneKelvinDelta > twoKelvinsDelta);
            Assert.False(oneKelvinDelta >= twoKelvinsDelta);
            Assert.False(twoKelvinsDelta < oneKelvinDelta);
            Assert.False(twoKelvinsDelta <= oneKelvinDelta);
        }

        [Test]
        public void CompareToIsImplemented()
        {
            TemperatureDelta kelvindelta = TemperatureDelta.FromKelvinsDelta(1);
            Assert.AreEqual(0, kelvindelta.CompareTo(kelvindelta));
            Assert.Greater(kelvindelta.CompareTo(TemperatureDelta.Zero), 0);
            Assert.Less(TemperatureDelta.Zero.CompareTo(kelvindelta), 0);
        }

        [Test]
        [ExpectedException(typeof(ArgumentException))]
        public void CompareToThrowsOnTypeMismatch()
        {
            TemperatureDelta kelvindelta = TemperatureDelta.FromKelvinsDelta(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            kelvindelta.CompareTo(new object());
        }

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void CompareToThrowsOnNull()
        {
            TemperatureDelta kelvindelta = TemperatureDelta.FromKelvinsDelta(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            kelvindelta.CompareTo(null);
        }


        [Test]
        public void EqualityOperators()
        {
            TemperatureDelta a = TemperatureDelta.FromKelvinsDelta(1);
            TemperatureDelta b = TemperatureDelta.FromKelvinsDelta(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Test]
        public void EqualsIsImplemented()
        {
            TemperatureDelta v = TemperatureDelta.FromKelvinsDelta(1);
            Assert.IsTrue(v.Equals(TemperatureDelta.FromKelvinsDelta(1)));
            Assert.IsFalse(v.Equals(TemperatureDelta.Zero));
        }

        [Test]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            TemperatureDelta kelvindelta = TemperatureDelta.FromKelvinsDelta(1);
            Assert.IsFalse(kelvindelta.Equals(new object()));
        }

        [Test]
        public void EqualsReturnsFalseOnNull()
        {
            TemperatureDelta kelvindelta = TemperatureDelta.FromKelvinsDelta(1);
            Assert.IsFalse(kelvindelta.Equals(null));
        }
    }
}
